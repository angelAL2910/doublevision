#
# @(#)javacall_linux_arm_eabi.cfg	1.13 06/01/26 12:30:55
#
# Copyright ?2006 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

#
# Rules for win32-hosted build
#
host_os        = linux
host_arch      = i386
os_family      = linux
#host_compiler  = arm_eabi
host_compiler  = gcc

MakeDepsMain_javacall = UnixPlatform
MakeDepsOpts_javacall = -resolveVpath true

LOOP_GEN_FLAGS = +GenerateGNUCode
ROM_GEN_FLAGS  = +GenerateGNUCode

ifeq ($(JAVACALL_OUTPUT_DIR),)
$(error JAVACALL_OUTPUT_DIR is not set)
endif

#----------------------------------------------------------------------
# The following two flags tells jvm.make to include the alternative
# platform/compiler makefiles:
#
# $(JVMWorkSpace)/build/eabi/alt_platform.make
# $(JVMWorkSpace)/build/eabi/alt_compiler.make
#----------------------------------------------------------------------
ALT_PLATFORM = eabi
ALT_COMPILER = eabi

    export ENABLE_TIMER_THREAD     := true
    export ENABLE_TIMER_THREAD__BY := javacall_linux_arm_eabi.cfg

#----------------------------------------------------------------------
# LoopGen: an .exe that runs on the HOST. It has an ARM assembler loop
# generator and will generate the ARM assembler loop.
#----------------------------------------------------------------------
ifeq ($(IsLoopGen),true)   
    arch               = arm
    compiler           = $(host_compiler)
    CPP_DEF_FLAGS      += -DARM -DCROSS_GENERATOR=1

    ifndef ENABLE_SOFT_FLOAT
    export ENABLE_SOFT_FLOAT     = true
    export ENABLE_SOFT_FLOAT__BY = javacall_linux_arm_eabi.cfg
    endif

    ifndef MSW_FIRST_FOR_DOUBLE
    export MSW_FIRST_FOR_DOUBLE     = true
    export MSW_FIRST_FOR_DOUBLE__BY = javacall_linux_arm_eabi.cfg
    endif

endif

#----------------------------------------------------------------------
# RomGen: an .exe that runs on the HOST. It has an i386 assembler or C
# loop. It runs on the HOST to generate ROMImage.cpp.
#----------------------------------------------------------------------
ifeq ($(IsRomGen),true)

    export ENABLE_C_INTERPRETER             := true
    export ENABLE_C_INTERPRETER__BY         := javacall_linux_arm_eabi.cfg
    export ENABLE_INTERPRETER_GENERATOR     := false
    export ENABLE_INTERPRETER_GENERATOR__BY := javacall_linux_arm_eabi.cfg
    # SOFT_FLOAT is enabled to have GP offsets in romgen the same as
    # those at run-time.
    ifndef ENABLE_SOFT_FLOAT
    export ENABLE_SOFT_FLOAT                := true
    export ENABLE_SOFT_FLOAT__BY            := javacall_linux_arm_eabi.cfg
    endif
    override arch                           := c
    carch                                    = arm
    iarch                                    = c
    CPP_DEF_FLAGS                           += -DARM -DCROSS_GENERATOR=1
    compiler                                 = $(host_compiler)

    ifndef TARGET_MSW_FIRST_FOR_DOUBLE
    export TARGET_MSW_FIRST_FOR_DOUBLE      := false
    export TARGET_MSW_FIRST_FOR_DOUBLE__BY  := javacall_linux_arm_eabi.cfg
    endif
    ifndef TARGET_MSW_FIRST_FOR_LONG
    export TARGET_MSW_FIRST_FOR_LONG := false
    export TARGET_MSW_FIRST_FOR_LONG__BY := javacall_linux_arm_eabi.cfg
    endif
endif

#----------------------------------------------------------------------
# Target: target/bin/{cldc_hi.axf, cldc_hi_r.axf, cldc_hi_g.axf}.
# These are pure ADS/ARM binaries that run on the TARGET.
#----------------------------------------------------------------------
ifeq ($(IsTarget),true)
    os_family = javacall
    arch      = arm
    compiler  = eabi


    # Turn off ROM and INTERPRETER generators if possible to reduce size
    # of release and product builds
    ifneq ($(ENABLE_MONET), true)
    ifndef ENABLE_ROM_GENERATOR
    export ENABLE_ROM_GENERATOR             = false
    export ENABLE_ROM_GENERATOR__BY         = javacall_linux_arm_eabi.cfg
    endif
    endif
    ifndef ENABLE_INTERPRETER_GENERATOR
    export ENABLE_INTERPRETER_GENERATOR     = false
    export ENABLE_INTERPRETER_GENERATOR__BY = javacall_linux_arm_eabi.cfg
    endif

#    export ENABLE_SEGMENTED_ROM_TEXT_BLOCK     := true
#    export ENABLE_SEGMENTED_ROM_TEXT_BLOCK__BY := javacall_linux_arm_eabi.cfg

    ifndef ENABLE_SOFT_FLOAT
    export ENABLE_SOFT_FLOAT     = true
    export ENABLE_SOFT_FLOAT__BY = javacall_linux_arm_eabi.cfg
    endif

    ifndef MSW_FIRST_FOR_DOUBLE
    export MSW_FIRST_FOR_DOUBLE     = true
    export MSW_FIRST_FOR_DOUBLE__BY = javacall_linux_arm_eabi.cfg
    endif

    ifndef MERGE_SOURCE_FILES
           MERGE_SOURCE_FILES  = false
    endif

    ifndef SOURCE_MERGER_SIZE
           SOURCE_MERGER_SIZE  = 35
    endif

    ifeq ($(ENABLE_THUMB_VM), true)
        THUMB_CFLAGS            = -mthumb -mthumb-interwork
        ARM_CFLAGS              = -mthumb-interwork

        ASM_FLAGS              += -mthumb-interwork
        LINK_FLAGS             += -mthumb-interwork

        LOOP_GEN_FLAGS         += +GenerateThumbInterwork
    endif

    CPP_DEF_FLAGS += -DARM -DNO_STDINT

    ifeq ($(ENABLE_SOFT_FLOAT), true)
        ifneq ($(ENABLE_ARM_VFP), true)
#            CPP_DEF_FLAGS += -msoft-float
#            ASM_FLAGS += -mno-fpu
#            LINK_FLAGS += -Xlinker --no-warn-mismatch
        endif
    endif

    # Always disable timer thread on nds
    export ENABLE_TIMER_THREAD     := true
    export ENABLE_TIMER_THREAD__BY := javacall_linux_arm_eabi.cfg

    ENABLE_PCSL = true
    export ENABLE_PCSL := true

    export skip_link_image := true

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc

    CPP_DEF_FLAGS += -I$(JAVACALL_INCLUDE_DIR) 

endif

